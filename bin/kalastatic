#!/usr/bin/env node
'use strict';

/**
 * Module dependencies.
 */

var KalaStatic = require('..')
var program = require('commander')
var nconf = require('nconf')
var path = require('path')
var browserSync = require('browser-sync')
var fs = require('fs')
var mkdirp = require('mkdirp')

function createFile(filename) {
  fs.open(filename,'r',function(err, fd){
    if (err) {
      fs.writeFile(filename, '', function(err) {
          if(err) {
              console.log(err);
          }
          console.log("The file was saved!");
      });
    } else {
      console.log("The file exists!");
    }
  });
}

function retrieveConfig(options) {
  nconf.argv()
   .env()
   .file('kalastatic', {
     file: options.config || 'kalastatic.yaml',
     format: require('nconf-yaml')
   })
   .file('package', {
     file: 'package.json'
   })
   return nconf;
}

program
  .version(require('../package.json').version)

program
  .command('build')
  .description('Build in the current working directory, using the given config file.')
  .option('-c, --config <file>', 'set the configuration file, defaults to kalastatic.yaml')
  .action(function (options) {
    var conf = retrieveConfig(options);
    var kalastatic = new KalaStatic(conf);
    kalastatic.build().catch(function (err) {
      console.error(err)
      process.exitCode = 1
    })
  })

program
  .command('start')
  .description('Watch and serve KalaStatic')
  .option('-c, --config <file>', 'set the configuration file, defaults to kalastatic.yaml')
  .action(function (options) {
    // Build the KalaStatic application, and get the config for it.
    var kalastatic = new KalaStatic(retrieveConfig(options));
    var conf = kalastatic.nconf
    var bsIndex = conf.get('bsIndex')
    var bsBrowser = conf.get('bsBrowser')
    var base = conf.get('base')
    var source = conf.get('source')
    var destination = conf.get('destination')
    var finalSource = path.join(base, source, '**')
    var finalDest = path.join(base, destination)
    var bsWebroot = conf.get('bsWebroot')

    // Build KalaStatic to make sure it works first.
    kalastatic.build().then(function () {
      // Build an unhandled rejection error callback.
      process.on('unhandledRejection', function (reason) {
        console.error('Unhandled error: ' + reason)
      });

      // Start up the BrowserSync server.
      var bs = browserSync.create('kalastatic')

      // Set up the server.
      bs.init({
        server: bsWebroot || finalDest,
        browser: bsBrowser,
        index: bsIndex
      })

      // Create a watch task.
      bs.watch(finalSource).on('change', function () {
        // Rebuild KalaStatic.
        kalastatic.build().then(function () {
          // When changes, reload the page.
          bs.reload('*')
        }).catch(function (err) {
          // When errors occur, report them to the console.
          console.error(err)
        })
      })
    }).catch(function (err) {
      // KalaStatic failed, so report it and exit out.
      console.error(err)
      process.exitCode = 1
    })
  })

program
  .command('create')
  .alias('cc')
  .description('Automates the creation ofâ€¦ things')
  .option('-c, --config <file>', 'set the configuration file, defaults to kalastatic.yaml')
  .action(function(options) {

    var kalastatic = new KalaStatic(retrieveConfig(options))
    var conf = kalastatic.nconf
    var source = conf.get('source') || 'src'
    var component, scssFile, jsonFile, twigFile, jsFile;

    if(process.argv[2] == "cc" || (process.argv[2] == "create" && process.argv[3] == "component")) {

      if(process.argv[2] == "cc" ) {
        var component = process.argv[3].split("/");
      } else {
        var component = process.argv[4].split("/");
      }

      var basePath = path.join(source,'components',component[0],component[1])

      mkdirp(basePath, function(){
        var basePath = path.join(source,'components',component[0],component[1])
        var scssFile = path.join(basePath,"_"+component[1]+'.scss')
        var jsonFile = path.join(basePath,component[1]+'.json')
        var twigFile = path.join(basePath,component[1]+'.twig')
        createFile(scssFile)
        createFile(jsonFile)
        createFile(twigFile)
      });

    }
  })

if (!process.argv.slice(2).length) {
  program.outputHelp()
}
else {
  program.parse(process.argv)
}
